# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plan.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtCore import QDate,QTime
from PyQt5.QtWidgets import *
sys.path.append("../") # 返回上层路径
from APservice.test_jishi import Timer
from APservice import service,test_jishi
import pymysql
import APdatabase.a2 as a2
from APdatabase import planIN,planedit,show



a2.init()
class Ui_MainWindow(QMainWindow):


    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        # Ui_MainWindow.setStyleSheet("#MainWindow{background-color:red)}")
        # # MainWindow.setStyleSheet("#MainWindow{border-image:url(image/1.jpg)}")
        # self.plan_list.setStyleSheet("QTableWidge{background:rgb(255, 0, 0, 50);}"
        #                              "QTableWidge{color:rgb(255, 0, 0, 250); font-size:80px; font-weight:bold}")

        self.setupUi(self)



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        # self.setStyleSheet("#MainWindow{border-image:url(image/2.jpg)}")#
        MainWindow.setStyleSheet("#MainWindow{border-image:url(image/1.jpg)}")
        Ui_MainWindow.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.plan_list = QtWidgets.QTableWidget(self.centralwidget)
        self.plan_list.setGeometry(QtCore.QRect(60, 20, 600, 350))
        self.plan_list.setObjectName("plan_list")
        # # self.plan_list.setStyleSheet("#{border-image:url(image/2.jpg)}")
        # self.plan_list.setStyleSheet("QTableWidge{background:rgb(255, 0, 0, 50);}"
        #                          "QTableWidge{color:rgb(255, 0, 0, 250); font-size:80px; font-weight:bold}")
        self.plan_list.setStyleSheet("QTableWidget{background:rgb(0, 0, 0,50);}"
                                 "QTableWidget{color:rgb(172, 255, 47, 250); font-size:20px; font-weight:bold}")
        self.plan_list.setColumnCount(3)
        self.plan_list.setRowCount(0)


        self.plan_exec = QtWidgets.QGroupBox(self.centralwidget)
        self.plan_exec.setGeometry(QtCore.QRect(70, 400, 651, 121))
        self.plan_exec.setObjectName("plan_exec")
        self.layoutWidget = QtWidgets.QWidget(self.plan_exec)
        self.layoutWidget.setGeometry(QtCore.QRect(50, 50, 551, 35))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.addBNT = QtWidgets.QPushButton(self.layoutWidget)
        self.addBNT.setObjectName("addBNT")
        self.horizontalLayout.addWidget(self.addBNT)
        self.editBNT = QtWidgets.QPushButton(self.layoutWidget)
        self.editBNT.setObjectName("editBNT")
        self.horizontalLayout.addWidget(self.editBNT)
        self.dellBNT = QtWidgets.QPushButton(self.layoutWidget)
        self.dellBNT.setObjectName("dellBNT")
        self.horizontalLayout.addWidget(self.dellBNT)
        self.startBNT = QtWidgets.QPushButton(self.layoutWidget)
        self.startBNT.setObjectName("startBNT")
        self.horizontalLayout.addWidget(self.startBNT)
        self.fenxiBNT = QtWidgets.QPushButton(self.centralwidget)
        self.fenxiBNT.setGeometry(QtCore.QRect(680, 20, 100, 32))
        self.fenxiBNT.setObjectName("fenxiBNT")
        self.fenxiBNT.setStyleSheet("QPushButton{background:rgb(0, 0, 0,100);}"
                                     "QPushButton{color:rgb(255, 230, 47, 250); font-size:20px; font-weight:bold}")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        self.addBNT.clicked.connect(self.planin)
        self.plan_list.setAlternatingRowColors(True)

        self.plan_list.itemClicked.connect(self.outSelect)
        # self.query()

        self.dellBNT.clicked.connect(self.delete)
        self.startBNT.clicked.connect(self.play)
        self.fenxiBNT.clicked.connect(self.work)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.query()

    def outSelect(self, Item=None):#移到service
        if Item == None:


            return
        else:
            t = self.plan_list.currentRow()
            global planid_x, kemu_x, neirong_x, shichang_x, date_x
            # print(t)
            planid_x = self.plan_list.item(t,0).text()
            kemu_x = self.plan_list.item(t,2).text()
            neirong_x = self.plan_list.item(t,3).text()
            shichang_x = self.plan_list.item(t,4).text()
            date_x = self.plan_list.item(t,1).text()
            a2.setvalue('planid_x',planid_x)
            a2.setvalue('shichang_x', shichang_x)
            a2.setvalue('kemu_x', kemu_x)
            a2.setvalue('neirong_x', neirong_x)

    def work(self):
        self.s = show.show_MainWindow()#新增一页
        self.s.show()




    def play(self):
        self.m = test_jishi.Timer()
        self.m.show()
        self.close()

        # try:
        #
        #
        #     if self.outSelect !="":  # 判断是否选择了要删除的数据
        #
        #         self.m = test_jishi.Timer()
        #         self.m.show()
        #         self.close()

        # except:
        #     print(21)
        #     QMessageBox.warning(None, '警告', '请先选择要执行的数据！', QMessageBox.Ok)


    def query(self):#待完善：显示全部、显示完成、显示未完成、选取日期等
        self.plan_list.setRowCount(0)  # 清空表格中的所有行

        result = service.query("select planID,date,kemu,neirong,shichang from tb_plan where wancheng_shifou =%s",0)

        row = len(result)  # 取得记录个数，用于设置表格的行数

        self.plan_list.setRowCount(row)  # 设置表格行数
        self.plan_list.setColumnCount(5)  # 设置表格列数
        # if a2.setvalue（）      #设置只显示未完成的数据
        # self.plan_list.setStyleSheet("QTableWidge{background:rgb(255, 0, 0, 50);}"
        #                              "QTableWidge{color:rgb(255, 0, 0, 250); font-size:80px; font-weight:bold}")
        # 设置表格的标题名称
        self.plan_list.setHorizontalHeaderLabels(["编号",'日期','科目', '内容', "计划时长"])
        for i in range(row):  # 遍历行
            for j in range(self.plan_list.columnCount()):  # 遍历列
                data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格

                self.plan_list.setItem(i, j, data)  # 设置每个单元格的数据
                # self.plan_list.setStyleSheet("QTableWidge{background:rgb(255, 0, 0, 50);}"
                #                              "QTableWidge{color:rgb(255, 0, 0, 250); font-size:80px; font-weight:bold}")

    def planin(self):
        self.close()
        self.m = planIN.Ui_planIN()
        self.m.show()
    # ######修改暂停，遇到倒入问题了，待处理
    # def edit(self):
    #     # self.close()
    #     self.m = planedit.Ui_planEDIT()
    #     print("此为plan里的打印：",planid_x, kemu_x, neirong_x, shichang_x, date_x)
    #
    #     self.m.show()

    #####修改暂停，遇到倒入问题了，待处理

    def delete(self):
        try:
            if self.outSelect != "":  # 判断是否选择了要删除的数据
                # 执行删除操作
                result = service.exec("delete from tb_plan where planID= %s", planid_x)
                if result > 0:  # 如果结果大于0，说明删除成功
                    self.query()  # 在表格中显示最新数据
                    QMessageBox.information(None, '提示', '信息删除成功！', QMessageBox.Ok)
        except:
            QMessageBox.warning(None, '警告', '请先选择要删除的数据！', QMessageBox.Ok)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "待击毙的小兔子"))
        # self.plan_list.setTitle(_translate("MainWindow", "计划展示"))
        self.plan_exec.setTitle(_translate("MainWindow", "计划设置"))
        self.addBNT.setText(_translate("MainWindow", "新增"))
        self.editBNT.setText(_translate("MainWindow", "修改，暂不支持"))
        self.dellBNT.setText(_translate("MainWindow", "删除"))
        self.startBNT.setText(_translate("MainWindow", "开始"))
        self.fenxiBNT.setText(_translate("MainWindow", "成果分析"))
