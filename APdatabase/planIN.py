# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'planIN.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate,QTime,QDateTime
from PyQt5.QtWidgets import *
from APservice import service
import pymysql
from APdatabase import plan
sys.path.append("../") # 返回上层路径
from datetime import datetime,date,timedelta
# import datetime,time
global d
d = datetime.today().date()
print(d,type(d))


class Ui_planIN(QMainWindow):

    def __init__(self):
        super(Ui_planIN, self).__init__()
        self.setWindowFlags(QtCore.Qt.MSWindowsFixedSizeDialogHint)
        self.setupUi(self)
        # result_sum1 = service.query(
        #     "select date,sum(shichang) as SC,planID from tb_plan group by date order by SC desc limit 1")

        # result_sum1 = service.query("select date,sum(shichang) as SC,shichang,planID from tb_plan group by date")
        # print(result_sum1,SC)

        # db = service.open()  # 连接数据库
        # cursor = db.cursor()  # 使用cursor()方法获取操作游标
        # sql = "select date,sum(shichang) as SC from tb_plan group by date"
        # cursor.execute(sql)  # 执行查询SQL语句
        # result = cursor.fetchall()  # 记录查询结果
        # cursor.close()  # 关闭游标
        # db.close()  #
        # print(result,type(result))
        # d = self.datetime.date.today()
        # print(d,type(d))
        # B = {}
        # for q in result:
        #     print(q,type(q),"q")
        #     t = list(q)
        #     global d
        #     p = str(d)
        #     print(t,type(t),"t",t[p])
        #     for i in range(0,len(t),2):
        #         B[t[i]] = t[i+1]
        # print(B,type(B))
        # d2 = dict(zip(B.value(), B.key()))
        # d2 = {}
        #
        # for key, value in B.items():
        #
        #
        #     d2[value] = key
        #     # Q = d2[str(datetime.date(2021, 6, 19))]
        # print(d2)


    def setupUi(self, planUI):
        planUI.setObjectName("planUI")
        planUI.resize(594, 407)
        # MainWindow1.setStyleSheet("#MainWindow1{border-image:url(image/1.jpg)}")
        planUI.setStyleSheet("#planUI{border-image:url(image/1.jpg)}")

        self.groupBox = QtWidgets.QGroupBox(planUI)
        self.groupBox.setGeometry(QtCore.QRect(30, 10, 391, 291))
        self.groupBox.setObjectName("groupBox")

        self.kemuIN = QtWidgets.QLineEdit(self.groupBox)
        self.kemuIN.setGeometry(QtCore.QRect(140, 60, 113, 21))
        self.kemuIN.setObjectName("kemuIN")

        self.neirongIN = QtWidgets.QLineEdit(self.groupBox)
        self.neirongIN.setGeometry(QtCore.QRect(140, 140, 113, 21))
        self.neirongIN.setObjectName("neirongIN")

        self.shichangIN = QtWidgets.QSpinBox(self.groupBox)
        self.shichangIN.setGeometry(QtCore.QRect(140, 220, 81, 22))
        self.shichangIN.setMaximum(120)
        self.shichangIN.setObjectName("shichangIN")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(230, 220, 58, 16))
        self.label_4.setObjectName("label_4")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 30, 69, 231))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)

        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)

        self.label_3 = QtWidgets.QLabel(self.layoutWidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)

        self.dataIN = QtWidgets.QDateEdit(planUI)
        self.dataIN.setGeometry(QtCore.QRect(90, 340, 110, 22))
        self.dataIN.setObjectName("dataIN")
        self.dataIN.setDateTime(QDateTime.currentDateTime())
        # self.dataIN.setStyleSheet("QLabel{background:rgb(0, 0, 0);}"
                                     # "QLabel{color:rgb(0, 255, 17, 250); font-size:20px; font-weight:bold}")
        # print(QDateEdit.objectName())#
        # self.dataIN.setStyleSheet("QLabel{color:rgb(0, 255, 17); font-size:20px; font-weight:bold}")

        self.saveBNT = QtWidgets.QPushButton(planUI)
        self.saveBNT.setGeometry(QtCore.QRect(460, 340, 100, 32))
        self.saveBNT.setObjectName("saveBNT")

        self.editBNT = QtWidgets.QPushButton(planUI)
        self.editBNT.setGeometry(QtCore.QRect(410, 3400, 100, 32))
        self.editBNT.setObjectName("editBNT")

        self.label_5 = QtWidgets.QLabel(planUI)
        self.label_5.setGeometry(QtCore.QRect(30, 340, 41, 16))
        self.label_5.setObjectName("label_5")

        self.label_6 = QtWidgets.QLabel(planUI)#可用时长显示
        self.label_6.setGeometry(QtCore.QRect(230, 340, 58, 16))
        self.label_6.setObjectName("label_6")

        self.lcdNumber = QtWidgets.QLabel(planUI)#可用时长显示
        self.lcdNumber.setGeometry(QtCore.QRect(330, 340, 64, 23))
        self.lcdNumber.setObjectName("lcdNumber")
        self.lcdNumber.setText("1分钟")#可用时长需要设计计算
        self.lcdNumber.setStyleSheet("QLabel{background:rgb(0, 0, 0);}"
                                 "QLabel{color:rgb(0, 255, 17, 250); font-size:20px; font-weight:bold}")

        self.label.setBuddy(self.kemuIN)
        self.label_2.setBuddy(self.neirongIN)
        self.label_3.setBuddy(self.shichangIN)
        self.label_5.setBuddy(self.dataIN)


        self.retranslateUi(planUI)
        self.saveBNT.clicked.connect(self.add)
        # self.saveBNT.clicked.connect(self.query)

        QtCore.QMetaObject.connectSlotsByName(planUI)

        # # 获取输入信息

    # def query(self):
        # D=datetime.strptime(date1,"%Y/%m/%d").date()
        # result_sum1 = service.query("select sum(shichang) from tb_plan group by date ")
        # result_date = service.query("select date from tb_plan")
        # print(result_date,type(result_date))
        # # result_sum1 = service.query("select sum(shichang) from tb_plan where date = %s order by create_time limit 1",D)
        # global t
        # t = 0
        # for a in result_sum1[0]:
        #     t +=int(a)
        #     P = t + int(time_long)
        # print(t,a,type(t),type(a))
        # # result1 = service.exec("update tb_plan set jihua_zongshichang = %s where date =%S values (%s,%s)",
        #                       (P, D))
        # result2 = service.exec1("update tb_plan a inner join(select planID sum(shichang) as SC from tb_plan group by date) b on a.planID = b.planID set b.jihua_zongshichang = a.SC")
        # print(result2,type(result2))
        # pass



    def add(self):
        global date1,t,time_long
        kemu = self.kemuIN.text()
        neirong = self.neirongIN.text()
        time_long = self.shichangIN.text()

        date1 = self.dataIN.text()
        creat_time = datetime.strptime(date1,"%Y/%m/%d")#
        D = datetime.strptime(date1,"%Y/%m/%d").date()
        # D = datetime.strptime(date, "%Y/%m/%d")
        # print(D,type(D))

        t = 0

        # result1 = service.query("SELECT SUM(shichang) FROM tb_plan where date = %s ",D)
        # # result1 = service.query("SELECT sum(shichang) FROM tb_plan where date=%S", D)
        # print(result1, type(result1))  # 统计某一天的计划总时间
        #
        # for a in result1[0]:
        #     print(a,type(a))
        #     t += int(a)
        #     print(t,type(t))



        if kemu != "" and neirong != "" and int(time_long) != 0 :  # 判断不为空
            result = service.exec("insert into tb_plan(kemu,neirong,shichang,date,creat_time ) values (%s,%s,%s,%s,%s)",
                              (kemu, neirong, time_long,D,creat_time))
            # result = service.exec(
            #     "insert into tb_plan(kemu,neirong,shichang,date,creat_time ,jihua_zongshichang) values (%s,%s,%s,%s,%s,%s)",
            #     (kemu, neirong, time_long, D, creat_time, P))

            if result > 0:  # 如果结果大于0，说明添加成功
            # service.query()  # 在表格中显示最新数据
                QMessageBox.information(None, '提示', '信息添加成功！', QMessageBox.Ok)
            # self.query()
                self.close()
                self.m = plan.Ui_MainWindow()
                self.m.show()
            else:
                QMessageBox.information(None, '提示', '信息添加不成功！', QMessageBox.Ok)
        else:
            QMessageBox.warning(None, '警告', '请输入数据后，再执行相关操作！', QMessageBox.Ok)


    def retranslateUi(self, planUI):
        _translate = QtCore.QCoreApplication.translate
        planUI.setWindowTitle(_translate("planUI", "计划录入"))
        self.groupBox.setTitle(_translate("planUI", "输入界面"))
        self.label_4.setText(_translate("planUI", "分钟"))
        self.label.setText(_translate("planUI", "科      目："))
        self.label_2.setText(_translate("planUI", "内       容："))
        self.label_3.setText(_translate("planUI", "计划时长："))
        self.saveBNT.setText(_translate("planUI", "保存"))
        self.label_5.setText(_translate("planUI", "日期"))
        self.label_6.setText(_translate("planUI", "可用时长"))
